log2(n)


//recursive


//C-C++

int binarySearch(int arr[], int left, int right, int x)
{
    int mid = left + (right - left) / 2;
     if (left <= right) {
        if (arr[mid] == x) return mid;
        else if (arr[mid] < x) return binarySearch(arr, mid+1, right, x);
        else return binarySearch(arr, left, mid-1, x);
     }
     return -1;
}


//Python
def binarySearch(arr, left, right, x)
{
   if left <= right:
       mid = left + (right - left) / 2;
       if arr[mid] == x:
          return mid;
       elif arr[mid] < x:
          return binarySearch(arr, mid+1, right, x)
       else:
          return binarySearch(arr, left, mid-1, x);
    else:
       return -1;
}


//Java
class BinarySearch {
     int binarySearch(int arr[], int left, int right, int x) {
        if (left <= right) {
           int mid = left + (right - left) / 2;
           if (arr[mid] == x) return mid;
           else if (arr[mid] < x) return binarySearch(arr, mid+1, right, x);
           else return binarySearch(arr, left, mid-1, x);
        }
        return -1;
     }
}



//Iterative
int binarySearch(int arr[], int left, int right, int x)
{
   int mid = left + (right - left) / 2;
   while (left <= right) {
        if (arr[mid] == x) return mid;
        else if (arr[mid] < x) left = mid + 1;
        else right = mid-1;
   }
   return -1;
}


//Python
def binarySearch(arr, left, right, x)
{
   while left <= right:
       mid = left + (right - left) / 2
       if arr[mid] == x:
          return mid;
       elif arr[mid] < x:
          left = mid + 1
       else:
          right = mid - 1;
    return -1;
}


//Java
class BinarySerch {

int binarySearch(int arr[], int left, int right, int x)
{
   int mid = left + (right - left) / 2;
   while (left <= right) {
        if (arr[mid] == x) return mid;
        else if (arr[mid] < x) left = mid + 1;
        else right = mid-1;
   }
   return -1;
}

}
