/*
Exponential search involves two steps:

1.Find range where element is present
2.Do Binary Search in above found range.

Time Complexity : O(Log n)
Auxiliary Space : The above implementation of Binary Search is recursive and requires O()Log n) space. With iterative Binary Search, we need only O(1) space.

Applications of Exponential Search:

Exponential Binary Search is particularly useful for unbounded searches, where size of array is infinite. Please refer Unbounded Binary Search for an example.
It works better than Binary Search for bounded arrays also when the element to be searched is closer to the first element.
*/

int binarySearch(int arr[], int low, int high, int x)
{
   while (low < high) {
        int mid = low + (high - low) / 2;
        if (x == arr[mid]) return mid;
        else if (x < arr[mid]) high = mid - 1;
        else low = mid + 1;
   }
   return -1;
}

void exponentialSearch(int arr[], int n, int x)
{
    if(arr[0] == x) return 0;

    //Find range for binary serach by repeated doubing
    int id = 1;
    while (id < n && arr[i] <= x) {
       id *= 2;
    }

    return binarySearch(arr, id/2, min(id, n), x);
}
